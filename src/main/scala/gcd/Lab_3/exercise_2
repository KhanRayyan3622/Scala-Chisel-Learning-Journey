
package Lab_3
import chisel3._
import chisel3.util._

class RISCV_ALU extends Module {
  val io = IO(new Bundle {
    val operandA = Input(UInt(32.W))
    val operandB = Input(UInt(32.W))
    val aluOp = Input(UInt(4.W))
    val result = Output(UInt(32.W))
  })

  io.result := 0.U

  switch (io.aluOp) {
    is(0.U) { 
      io.result := io.operandA + io.operandB
    }
    is(1.U) { 
      io.result := io.operandA - io.operandB
    }
    is(2.U) { 
      io.result := io.operandA & io.operandB
    }
    is(3.U) { 
      io.result := io.operandA | io.operandB
    }
    is(4.U) { 
      io.result := io.operandA ^ io.operandB
    }
    is(5.U) { 
      io.result := (io.operandA.asSInt < io.operandB.asSInt).asUInt
    }
    is(6.U) { 
      io.result := io.operandA << io.operandB(4, 0)
    }
    is(7.U) { 
      io.result := (io.operandA < io.operandB).asUInt
    }
    is(8.U) { 
      io.result := io.operandA >> io.operandB(4, 0)
    }
    is(9.U) { 
      io.result := (io.operandA.asSInt >> io.operandB(4, 0)).asUInt
    }
    is(10.U) { 
      io.result := io.operandA
    }
    is(11.U) { 
      io.result := io.operandB
    }
    is(15.U) { 
      io.result := 0.U
    }
  }
}
