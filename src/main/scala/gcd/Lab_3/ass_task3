// Task 3: To understand the concept of Valid interface, write a code of 2 to 4 Decoder and wrap the
// output in Valid construct. Skeleton code for this task is available in Listing 3.12. Block level diagram
// of immediate extension is shown in Figure 3.8.

package Lab_3
import chisel3._
import chisel3.util._

class LM_IO_Interface_decoder_with_valid extends Bundle {
  val in = Input(UInt(2.W))
  val out = Valid(Output(UInt(4.W)))
}

class decoder_with_valid extends Module {
  val io = IO(new LM_IO_Interface_decoder_with_valid)
  
  val decoderOutput = Wire(UInt(4.W))
  // Implement the logic for the 2-to-4 decoder output
  switch(io.in) {
    is("b00".U) { decoderOutput := "b0001".U }
    is("b01".U) { decoderOutput := "b0010".U }
    is("b10".U) { decoderOutput := "b0100".U }
    is("b11".U) { decoderOutput := "b1000".U }
  }

  // Assign the decoder output to the Valid bundle
  io.out.bits := decoderOutput
  io.out.valid := true.B // Assuming always valid for this example
}

object Main extends App {
  println((new chisel3.stage.ChiselStage).emitVerilog(new decoder_with_valid()))
}
