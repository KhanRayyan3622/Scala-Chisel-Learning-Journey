package Lab_7
import chisel3._
import chisel3.iotesters.{ChiselFlatSpec, Driver, PeekPokeTester}
import chisel3.util._

class ArbiterTest(c: MyArbiter) extends PeekPokeTester(c) {
  // Create input data
  val inputData = Seq(1, 2, 3, 4)

  for (i <- 0 until c.numInputs) {
    poke(c.io.in(i).valid, true)
    poke(c.io.in(i).bits, inputData(i).U)
  }

  for (i <- inputData.indices) {
    if (i == 0) {
      expect(c.io.out.valid, true)
      expect(c.io.out.bits, inputData(i).U)
    } else {
      expect(c.io.out.valid, false)
    }
    step(1)
  }
}

object ArbiterTest extends App {
  chisel3.iotesters.Driver(() => new MyArbiter(4)) { c =>
    new ArbiterTest(c)
  }
}
